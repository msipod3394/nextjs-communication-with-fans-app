// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  id_token           String? @db.Text
  session_state      String?
  scope              String?

  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

  // テーブル名を指定
  @@map(name:"accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // テーブル名を指定
  @@map(name:"sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  isSubscribed  Boolean   @default(false) @map(name:"is_subscribed")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  images        Images[]

  // 決済に関するスキーマ
  stripeCustomerId        String?  @unique  @map(name:"stripe_customer_id")
  stripeSubscriptionId    String?  @unique  @map(name:"stripe_subscription_id")

  @@map(name:"users")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name:"verification_tokens")
}

// ユーザー記事投稿用
model Post {
  id        String   @id @default(cuid()) // 主キー設定
  title     String
  content   Json?
  published Boolean  @default(true)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author    User     @relation(fields: [authorId], references: [id])
  images    Images[]

  @@map(name: "posts")
}

// 画像投稿
model Images {
  id        String   @id @default(cuid()) // 主キー設定
  userId    String
  postId    String   
  imageName String
  imageUrl  String   
  createdAt DateTime @default(now()) @map(name: "created_at")

  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@map(name: "images")
}

// // 活動実績
// model Works {
//   id        String   @id @default(cuid()) // 主キー設定
//   title     String
//   content   String
//   published Boolean  @default(false)
//   createdAt DateTime @default(now()) @map(name: "created_at")
//   updatedAt DateTime @default(now()) @map(name: "updated_at")

//   // premium   Premium? @relation(fields: [id], references: [id])
//   Premium Premium[]

//   @@map(name: "works")
// }

// // プレミアム
// model Premium {
//   id             String   @id @default(cuid()) // 主キー設定
//   url            String 
//   createdAt      DateTime @default(now()) @map(name: "created_at")
//   updatedAt      DateTime @default(now()) @map(name: "updated_at")

//   worksId Works @relation(fields: [id], references: [id])

//   @@map(name: "premiums")
// }
